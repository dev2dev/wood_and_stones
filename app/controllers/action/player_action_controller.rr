class Action::PlayerActionController < Action::BaseController
  
  before_filter :check_player_is_logged_in, :only => :create
  before_filter :assemble_info
  before_filter :all_actions, :for_game, :before_play, :after_play, :only => :index
  
  def index
    respond_to do |format|
      format.html do ||
        render :layout => false if params[:layout].to_s == 'false'
      end
      format.json do ||
        render :json => @actions.inject({}) { |games_to_actions, action|
          # this is an example of some code that ought to look like what it generates
          games_to_actions[action.game_id] ||= {}
          games_to_actions[action.game_id][action.cardinality] = {
            :player => action.player,
            :position => action.position,
            :removed => action.removed_serialized
          }
          games_to_actions
        }
      end
    end
  end
  
  def info
    respond_to do |format|
      format.json {
        render :json => @info
      }
    end
  end
  
  protected
  
  def check_player_is_logged_in
    unless self.current_user_id == @game.user_to_play_id
      render :text => "You cannot make a move unless you are logged in", :status => 401
      return false
    end
    true
  end
  
  def all_actions
    @actions ||= Action::Base.scoped
  end
  
  def for_game
    params[:game_id].andand { @actions = @actions.scoped(:conditions => {:game_id => it}) }
  end
  
  def before_play
    params[:before_play].andand { @actions = @actions.scoped(:conditions => {:cardinality => (0..(it.to_i-1))}) }
  end
  
  def after_play
    params[:after_play].andand { @actions = @actions.scoped(:conditions => {:cardinality => ((it.to_i + 1)..400)}) }
  end
  
end