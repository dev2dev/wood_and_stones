# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.
 
class ApplicationController < ActionController::Base
  
  layout 'iphone'
  
  include Authenticatable::ControllerMethods
  
  helper :all # include all helpers, all the time
  protect_from_forgery # See ActionController::RequestForgeryProtection for details
 
  # Scrub sensitive parameters from your log
  # filter_parameter_logging :password
  
  before_filter :set_instance
  
  def set_instance(
    name = self.class.name.demodulize.underscore[/^(.*)_controller$/, 1],
    model_class = self.class.name[/^(.*)Controller$/, 1].andand { get_const_for(it) }
  )
    (params["#{name}_id"] or params[:id]).andand do |it|
      instance_variable_set('@' + name, model_class.find(it))
    end
  end
  
  protected
  
  def assemble_info
    is_active = @game.user_to_play == self.current_user
    current_move = @game.actions.last.andand.cardinality or 0
    if self.current_user
      playing = if self.current_user == @game.black
          'black'
        elsif self.current_user == @game.white
          'white'
        end
      email = self.current_user.email
    else
      playing = email = nil
    end
    @info = {
      :active => is_active,
      :move_number => current_move,
      :playing => playing,
      :email => email
    }
  end
  
  private
  
  def get_const_for(modularized_name)
    modularized_name.split('::').inject(Kernel) { |namespace, name| namespace.const_get(name) }
  end
  
end