# Filters added to this controller apply to all controllers in the application.
# Likewise, all the methods added will be available for all controllers.

require 'ostruct'
 
class ApplicationController < ActionController::Base
  
  layout 'iphone'
  
  include Authenticatable::ControllerMethods
  
  helper :all # include all helpers, all the time
  protect_from_forgery # See ActionController::RequestForgeryProtection for details
 
  # Scrub sensitive parameters from your log
  # filter_parameter_logging :password
  
  before_filter :set_instance
  
  def set_instance(
    name = self.class.name.demodulize.underscore[/^(.*)_controller$/, 1],
    model_class = self.class.name[/^(.*)Controller$/, 1].andand { get_const_for(it) }
  )
    (params["#{name}_id"] or params[:id]).andand do |it|
      instance_variable_set('@' + name, model_class.find(it))
    end
  end
  
  protected
  
  def given_game
    params[:game_id].andand { @game = Game.find(it) }
  end
  
  def assemble_info
    is_active = self.current_user_id.andand { it == @game.user_to_play_id }
    current_move = @game.current_move_number
    playing, opponent = nil, nil
    self.current_user_id.andand do |id|
      if id == @game.black_id
        playing, opponent = 'black', 'white'
      elsif id == @game.white_id
        playing, opponent = 'white', 'black'
      end
    end
    @info = {
      :is_users_turn => is_active,
      :move_number => current_move,
      :playing => playing,
      :opponent => opponent,
      :to_play => @game.to_play,
      :game_state => @game.state,
      :create_move_js => "function (position) { return '#{create_move_url(:game_id=>@game.id, :position=>'zzzzz')}'.replace('zzzzz', position);}",
      :get_updates_js => "function (current_move_number) { return '#{get_updates_url(:game_id=>@game.id, :after_play=>'zzzzz', :layout=>'false')}'.replace('zzzzz', current_move_number);}",
      :get_history_js => "function (current_move_number) { return '#{get_history_url(:game_id=>@game.id, :before_play=>'zzzzz', :layout=>'false')}'.replace('zzzzz', current_move_number);}",
      :create_pass_url => create_pass_url(:game_id=>@game.id),
      :move_info_url => move_info_url(:game_id=>@game.id),
      :board_image_paths_url => url_for(:controller => :board, :action => :image_paths)
    }
  end
  
  # don't you hate cutesy names you'll forget in a week?
  # this returns an array of image paths
  def all_tile_paths
    Rails.root.join('public', 'images', 'board', 'temporary').entries.map(&:to_s).select { |e| e =~ /png$/ }.map { |e| "/images/board/temporary/#{e}"}
  end
  
  private
  
  def get_const_for(modularized_name)
    modularized_name.split('::').inject(Kernel) { |namespace, name| namespace.const_get(name) }
  end
  
end