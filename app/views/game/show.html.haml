- optional_get_history = @game.current_move_number > 0 ? ("game_show_helper.get_history_up_to(" + @game.current_move_number.to_s + ");") : ''
:javascript
  $(document).ready( function () {
    var info = #{@info.to_json};
    info.create_move_f = #{@info[:create_move_js]};
    info.get_updates_f = #{@info[:get_updates_js]};
    info.get_history_f = #{@info[:get_history_js]};
    var game_show_helper = GO.game_show_helper(info);
    game_show_helper.update_active_on_current_board();
    game_show_helper.update_move_infos();
    $.PeriodicalUpdater('#{move_info_url(:game_id=>@game.id)}',
      { type : 'json', minTimeout: 2000, maxTimeout: 8000 },
      game_show_helper.update_latest_server_info
    );
    $(document).everyTime('1s', function (count) {
      game_show_helper.process_server_info();
    });
    #{optional_get_history}
    $('#m0').data('number',0);
    $('#m#{@game.current_move_number}').data('number',#{@game.current_move_number});
    game_show_helper.document_ready_hook();
    $(document).data('game_show_helper', game_show_helper);
  });

-if @game.current_move_number == 0
  .current.move#m0
    .toolbar 
      %h1 We Go!
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :game => @game }
    %ul.individual.history.no_touch
      %li.prev.invisible
        %a No Prev
      %li.next
        %span.simulateSwipeBoardLeft
          Next
          %small.target_move 1
    .info
      %span.desc initial position. 
      %span.history
      %span.news
-else
  .move#m0
    .toolbar 
      %h1 We Go!
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :board => @game.initial_board }
    %ul.individual.history.no_touch
      %li.prev.invisible
        %a No Prev
      %li.next
        %span.simulateSwipeBoardLeft
          Next
          %small.target_move 1
    .info
      %span.desc initial position. 
      %span.history
      %span.news
  .current.move{:id=>"m#{@game.current_move_number}"}
    .toolbar 
      %h1 We Go!
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :game => @game }
    %ul.individual.history.no_touch
      %li.prev
        %span.simulateSwipeBoardRight
          Prev
          %small.target_move= @game.current_move_number - 1
      %li.next.invisible
        %span.simulateSwipeBoardLeft
          Next
          %small.target_move= @game.current_move_number + 1
    .info
      %span.desc.current= (@game.ended? ? 'position at the end of the game.' : 'current position.') 
      %span.history
        - action = @game.actions.last # TODO: denormalize like everything else
        #{action.player.titleize} has just
        -if action.kind_of?(Action::Pass)
          passed.
        -elsif !action.position.blank?
          played #{action.position}#{!action.removed.empty? ? (', capturing ' + pluralize(action.removed.size, 'stone')) : ''}.
      %span.news