-# game/show.html.haml
-#
-# This version asynchronously requests moves from the server after rendering the latest move.
-# 
-# begin hideaous workaround for JQTouch and HAML: It seems that <div style='current' id='foo'> is treated differently than
-# <div id=';foo' style='current>, and HAML generates one form when you write .current{ :id=>'foo } and the other when you
-# write %div{ :style=>'current', :id=>'foo' }
-last = @game.actions.last
-user_to_play = @game.user_to_play
-# TODO: implement wipes for history
-# NOTE: loading the latest moves should be divorced from setting whether the current move is playable
:javascript
  var game_show = function () {
    return {
      move_selector: function (div_num) {
        return '#m' + div_num + ' .board .empty';
      },
      enable_empty_places: function (move_div) {
        move_div.bind('click.place_stone',
          function (data) {
            var position = this.getAttribute('id');
            $.ajax({
              url: '#{create_move_url(:game_id=>@game.id, :position=>'zzzzz')}'.replace('zzzzz', position),
              type: 'POST',
              success: function (data) {
                disable_empty_places(div_num );
                GO.message('success', 'success placing a stone at ' + position);
              },
              error: function (data) {
                GO.message('error', 'unable to place a stone at ' + position + ' because: ' + data.responseText);
              },
            });
          }
        ).css({
          'cursor': 'pointer'
        });
      },
      disable_empty_places: function(move_div) {
        move_div.unbind('click.place_stone').css({
          'cursor': 'default'
        });
      },
      get_moves_up_to: function (current_latest_move) {
        $.ajax({
          url: '#{get_history_url(:game_id=>@game.id, :before_move=>'zzzzz', :layout=>'false')}'.replace('zzzzz', current_latest_move),
          type: 'GET',
          dataType: 'html',
          success: function (html) {
            $(html).insertAfter('#m0');
            $('#m' + current_latest_move + ' .history .prev').removeClass('invisible');
          },
          error: function (data) {
            GO.message('error', 'unable to load the game history before ' + current_latest_move + ' because: ' + data.responseText);
          }
        });
      },
      get_latest_moves: function () {
        current_latest_move = $('.move').size() - 1;
        $.ajax({
          url: '#{get_updates_url(:game_id=>@game.id, :after_move=>'zzzzz', :layout=>'false')}'.replace('zzzzz', current_latest_move),
          type: 'GET',
          dataType: 'html',
          success: function (html) {
            update_moves = $(html);
            if (update_moves.size() > 0) {
              update_moves.insertAfter('#m' + current_latest_move);
              $('#m' + current_latest_move + ' .history .next').removeClass('invisible');
            }
          },
          error: function (data) {
            GO.message('error', 'unable to load the game history after ' + current_latest_move + ' because: ' + data.responseText);
          }
        });
      },
      get_active_move: function (success_callback) {
        $.ajax({
          url: '#{active_move_url(:game_id=>@game.id)}',
          dataType: 'json',
          success: function (json) {
            success_callback(json.move);
          },
          error: function (data) {
            GO.message('error', 'unable to get the active move because: ' + data.responseText);
          }
        });
      }
    };
  }();
#settings
  -# list all game settings
:javascript
  $(document).ready( function () {
    game_show.get_active_move(function (move_number) {
      alert('Active move number retrieved: ' + move_number);
    });
  });
-if last.nil?
  .current.move#m0
    .toolbar 
      %h1 Beginning
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :board => @game.initial_board }
    %ul.individual
      %li
-else
  :javascript
    $(document).ready( function () {  
      game_show.get_moves_up_to(#{last.cardinality});
    });
  .move#m0
    .toolbar 
      %h1 Beginning
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :board => @game.initial_board }
    %ul.individual.history
      %li.next
        %a.slideleft{:href=>"#m1"}
          Next
          %small 1
  .current.move{:id=>"m#{last.cardinality}"}
    .toolbar 
      %h1 Move #{last.cardinality}
      %a.back{:href=>"#"} Back
    .board
      = render :partial => "board/board", :locals => { :board => last.after }
    %ul.individual.history
      %li.prev.invisible
        %a.slideright{:href=>"#m#{last.cardinality - 1}"}
          Prev
          %small
            = last.cardinality - 1
      %li.next.invisible
        %a.slideleft{:href=>"#m#{last.cardinality + 1}"}
          Next
          %small
            = last.cardinality + 1