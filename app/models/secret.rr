class Secret < ActiveRecord::Base
  belongs_to :user
  belongs_to :target, :polymorphic => true
  validates_uniqueness_of :secret
  validates_presence_of :secret
  
  before_validation_on_create :assign_secret
  
  has_many :notifications, :as => :subject, :class_name => 'Notification::Base'
  
  named_scope :for_user, lambda { |user|
    { :conditions => {:user_id => user.id} }
  }
  
  def assign_secret
    # self.secret = rand(9999999).shortened #TODO: Figure out a safer range
    self.secret = shortened(1000000 + rand(9999999))
    true
  end
  
  private
  
  URL_CHARS = ('0'..'9').to_a + %w(b c d f g h j k l m n p q r s t v w x y z) + %w(B C D F G H J K L M N P Q R S T V W X Y Z - _)
  URL_BASE = URL_CHARS.size
  
  def shortened(num)
    localCount = num
    result = ''
    while localCount != 0
      remainder = localCount % URL_BASE
      localCount = (localCount - remainder) / URL_BASE # localCount = (localCount â€“ remainder) / URL_BASE
      result = URL_CHARS[remainder] + result
    end
    result
  end
  

end

# ["QPlq", "LvHN", "wtzq", "Q2WY", "Z4Yy", "SmTW", "lC-C", "1cv5s", "93yh", "SMsB", "j2xN", "XKp-", "J24X", "1b6PH", "b_0T", "Pn34", "DSjT", "hCfz", "tbtn", "RZlL", "tK8n", "_pQT", "1g0MR", "QX-B", "1f2-f", "hPqZ"]