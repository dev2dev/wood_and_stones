class Game < ActiveRecord::Base
  
  class InvalidInitialization < Exception; end
  
  belongs_to :current_board, :class_name => "Board", :foreign_key => "current_board_id"
  
  validates_presence_of :current_board
  validates_associated :current_board
  
  has_many :actions, :class_name => "Action::Base", :foreign_key => "game_id"
  has_many :boards, :through => :actions, :source => :after
  
  def initialize(options = {})
    options ||= {} # to handle the vagaries of AR's create method
    super()
    if forked = options[:fork]
      self.current_board = if forked.kind_of?(Board)
        forked
      elsif forked.respond_to?(:current_board)
        forked.current_board
      else
        raise Game::InvalidInitialization.new("Don't know what to do with a #{it.inspect}")
      end
      fork
    elsif dimension = options[:dimension]
      self.current_board = Board.create(:dimension => dimension)
      options[:handicap].andand.to_i.andand { self.current_board.handicap(it) }
      start
    else 
      raise Game::InvalidInitialization.new("cannot initialize a game without forking or setting a dimension")
    end
  end
  
  state_machine do
    
    event :start do
      transition :to => :started
    end
    
    event :fork do
      transition :to => :forked
    end
    
    event :move do
      transition :from => [:started, :moved], :to => :moved
    end
    
    event :end do
      transition :from => [:started, :moved], :to => :ended
    end
    
  end
  
end