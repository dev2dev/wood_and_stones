# Methods added to this helper will be available to all templates in the application.
module ApplicationHelper
  
  TILE_IMG_CLASS_MAP = {
    :topleft => {
      nil     => 'intersection top left empty',
      'black' => 'intersection top left black',
      'white' => 'intersection top left white'
    },
    :top => {
      nil     => 'intersection top middle empty',
      'black' => 'intersection top middle black',
      'white' => 'intersection top middle white'
    },
    :topright => {
      nil     => 'intersection top right empty',
      'black' => 'intersection top right black',
      'white' => 'intersection top right white'
    },
    :left => {
      nil     => 'intersection left middle empty',
      'black' => 'intersection left middle black',
      'white' => 'intersection left middle white'
    },
    :right => {
      nil     => 'intersection top middle right empty',
      'black' => 'intersection top middle right black',
      'white' => 'intersection top middle right white'
    },
    :bottomleft => {
      nil     => 'intersection bottom left empty',
      'black' => 'intersection bottom left black',
      'white' => 'intersection bottom left white'
    },
    :bottom => {
      nil     => 'intersection bottom middle empty',
      'black' => 'intersection bottom middle black',
      'white' => 'intersection bottom middle white'
    },
    :bottomright => {
      nil     => 'intersection bottom right empty',
      'black' => 'intersection bottom right black',
      'white' => 'intersection bottom right white'
    },
    :blank => {
      nil     => 'intersection interior empty',
      'black' => 'intersection interior black',
      'white' => 'intersection interior white'
    },
    :star => {
      nil     => 'intersection star empty',
      'black' => 'intersection star black',
      'white' => 'intersection star white'
    }
  }
  
  def tile_class_array(board, valids)
    valids.inject(board.map_array(TILE_IMG_CLASS_MAP)) do |classes, its|
      returning(classes) do |cc|
        cc[its.location.first][its.location.last] += ' valid'
        pos = its.location.to_position
        its.dead_stones.each do |dead_location|
          cc[dead_location.first][dead_location.last] += " atari killed_by_#{pos}"
        end
      end
    end
  end
  
  # Returns a Gravatar URL associated with the email parameter.
  #
  # Copypasta: http://douglasfshearer.com/blog/gravatar-for-ruby-and-ruby-on-rails
  #
  # Gravatar Options:
  # - rating: Can be one of G, PG, R or X. Default is X.
  # - size: Size of the image. Default is 80px.
  # - default: URL for fallback image if none is found or image exceeds rating.
  def gravatar_url(email,gravatar_options={})
    grav_url = 'http://www.gravatar.com/avatar.php?'
    grav_url << "gravatar_id=#{Digest::MD5.new.update(email)}"
    grav_url << "&rating=#{gravatar_options[:rating]}" if gravatar_options[:rating]
    grav_url << "&size=#{gravatar_options[:size]}" if gravatar_options[:size]
    grav_url << "&default=#{gravatar_options[:default]}" if gravatar_options[:default]
  end
  
end
