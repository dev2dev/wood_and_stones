module Authenticatable
  # Mixin to provide authentication capabilities to ActionControllers.
  # Include Authenticatable::ControllerMethods in {RAILS_ROOT}/app/controllers/application_controller.rb
  module ControllerMethods
    protected

    def self.included(base)
      base.helper_method :current_user, :logged_in?, :authorized?, :admin?
      # base.filter_parameter_logging :password
    end

    def current_user_id
      session[:user_id]
    end

    def current_user
      @current_user ||= current_user_id.andand { User.find_by_id(it) }
    end

    def current_user=(user)
      if user.is_a?(User)
        @current_user = user
        #@current_user.update_attribute(:last_login_at, Time.now)
        session[:user_id] = @current_user.id
      else
        logout_current_user!
      end
    end

    # Filter method to enforce a login requirement
    # Apply as a before_filter on any controller you want to protect
    def authenticate
      (logged_in? && authorized?) ? true : access_denied
    end

    # Filter method to login a user using a cookie
    # Typically applied as a before_filter on the application controller
    def authenticate_with_cookies
      return if logged_in? || cookies[:auth_token].nil?
      self.current_user = User.find_by_remember_token(cookies[:auth_token])
    end

    def logged_in?
      current_user
    end

    def admin?
      false # logged_in? and current_user.admin?
    end

    def authorized?
      true
    end

    # Sets the appropriate cookies to remember the current user
    def remember_current_user
      if logged_in? && current_user.respond_to?(:remember)
        current_user.remember
        cookies[:auth_token] = { :value => current_user.remember_token, :expires => current_user.remember_token_expires_at }
      end
    end

    # Logs out the current user by removing the session, cookie, and any HTTP auth data
    def logout_current_user!
      current_user.try(:forget)
    rescue
      nil
    ensure
      @current_user = nil
      cookies.delete :auth_token
      # any other important cookies
      reset_session
    end

    def access_denied
      response_for_access_denied
      return false
    end

    def response_for_access_denied
      respond_to do |format|
        format.html do
          store_location
          flash.now[:notice] = unauthorized_message
          redirect_to new_session_url
        end

        # format.xml do
        #   headers['WWW-Authenticate'] = 'Basic realm="Application"'
        #   render :nothing => true, :status => :unauthorized
        # end

        format.all { redirect_to new_session_url }
      end
    end

    def store_location
      session[:return_to] = logged_in? ? nil : request.request_uri
    end

    # Overwrite in idividual controllers to customize the flash message shown when
    # authorization fails
    def unauthorized_message
      "Please use your login URL"
    end

    def redirect_back_or_to(options)
      session[:return_to] ? redirect_to(session[:return_to]) : redirect_to(options)
      session[:return_to] = nil
    end

    # Inspired by DHH's http_authentication plugin
    # See http://dev.rubyonrails.org/svn/rails/plugins/http_authentication
    def authenticate_with_http_basic(&login_procedure)
      if authorization = request.env['HTTP_AUTHORIZATION'] || request.env['X-HTTP_AUTHORIZATION']
        login_procedure.call(*Base64.decode64(authorization.split.last).split(/:/, 2)) 
      end
    end
  end
end
